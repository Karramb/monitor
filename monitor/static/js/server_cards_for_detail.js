document.addEventListener("DOMContentLoaded", function() {
  console.log('üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω');
  
  const hostCard = document.querySelector('.server-card');
  console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', !!hostCard);
  
  if (!hostCard) {
    console.error('‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  const hostId = hostCard.dataset.hostId;
  console.log('Host ID:', hostId);
  
  if (!hostId) {
    console.error('‚ùå Host ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const configStatusEl = hostCard.querySelector('.config-status');
  const statusTextEl = configStatusEl.querySelector('.status-text');
  
  const buttons = {
    toggle: hostCard.querySelector('.toggle-btn'),
    restore: hostCard.querySelector('.restore-btn'),
    fastPull: hostCard.querySelector('.fast-pull-btn'),
    pullReload: hostCard.querySelector('.pull-reload-btn')
  };

  const wsUrl = `ws://${window.location.host}/ws/core/${hostId}/`;
  console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
  
  const socket = new WebSocket(wsUrl);
  const alertsContainer = document.getElementById('liveAlerts');

  // ‚¨õ Overlay spinner
  let overlay = document.createElement('div');
  overlay.className = 'card-overlay d-none';
  overlay.innerHTML = `
    <div class="overlay-content text-center text-white">
      <div class="spinner-border spinner-border-lg mb-2" role="status"></div>
      <div class="overlay-message fw-semibold">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    </div>
  `;
  hostCard.style.position = 'relative'; // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è overlay
  hostCard.appendChild(overlay);

  function showOverlay(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    overlay.querySelector('.overlay-message').textContent = message;
    overlay.classList.remove('d-none');
  }

  function hideOverlay() {
    overlay.classList.add('d-none');
  }

  // üí¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ config-status —Å–æ —Å–ø–∏–Ω–Ω–µ—Ä–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  function showSpinner(message) {
    console.log('üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä:', message);

    // –£–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    configStatusEl.className = 'config-status text-center p-2 rounded mb-3';
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
    let spinner = configStatusEl.querySelector('.spinner-border');
    if (spinner) spinner.remove();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    spinner = document.createElement('div');
    spinner.className = 'spinner-border spinner-border-sm me-2';
    spinner.setAttribute('role', 'status');
    spinner.innerHTML = '<span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>';
    configStatusEl.insertBefore(spinner, statusTextEl);

    statusTextEl.textContent = message;
  }

  function updateConfigStatus(status) {
    console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å:', status);
    if (!status) return;

    statusTextEl.textContent = status;
    configStatusEl.className = 'config-status text-center p-2 rounded mb-3';

    // üîª –£–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (!operationInProgress) {
      const spinner = configStatusEl.querySelector('.spinner-border');
      if (spinner) spinner.remove();
    }

    if (status.includes("—Ç–µ—Å—Ç–æ–≤–∞—è")) {
      configStatusEl.classList.add("bg-warning", "text-dark");
    } else if (status.includes("–ø—Ä–æ–¥–∞–∫—à–Ω")) {
      configStatusEl.classList.add("bg-success", "text-white");
    } else {
      configStatusEl.classList.add("bg-secondary", "text-white");
    }
  }

  function showAlert(type, message) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    alertsContainer.appendChild(alert);
    
    setTimeout(() => {
      alert.classList.remove('show');
      setTimeout(() => alert.remove(), 150);
    }, 5000);
  }

  let operationInProgress = false;

  socket.onopen = function() {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    socket.send(JSON.stringify({action: 'get_status'}));
  };

  socket.onmessage = function(event) {
    try {
      const data = JSON.parse(event.data);
      console.log("üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);

      if (data.config_status) {
        updateConfigStatus(data.config_status);
      }

      const actionMap = {
        toggle_started:  ['info', '–ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ MongoDB', '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã...'],
        restore_started: ['info', '–ù–∞—á–∞—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–º–ø–∞ PG', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–º–ø–∞...'],
        fast_pull_started: ['info', '–ù–∞—á–∞—Ç git pull', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è git pull...'],
        pull_with_reload_started: ['info', '–ù–∞—á–∞—Ç Pull + Reload', 'Pull + Reload...'],

        toggle_completed: ['success', '–ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞', null],
        restore_completed: ['success', '–î–∞–º–ø PG —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', null],
        fast_pull_completed: ['success', 'Git pull –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', null],
        pull_with_reload_completed: ['success', 'Pull + Reload –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', null],

        toggle_failed: ['danger', '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è', null],
        restore_failed: ['danger', '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', null],
        fast_pull_failed: ['danger', '–û—à–∏–±–∫–∞ git pull', null],
        pull_with_reload_failed: ['danger', '–û—à–∏–±–∫–∞ Pull + Reload', null]
      };

      const actionData = actionMap[data.action];
      if (actionData) {
        const [type, msg, spinnerText] = actionData;
        showAlert(type, data.error ? `${msg}: ${data.error}` : msg);

        if (spinnerText) {
          operationInProgress = true;
          showOverlay(spinnerText);
          showSpinner(spinnerText);
          disableButtons();
        } else {
          operationInProgress = false;
          hideOverlay();

          // ‚úÖ –£–¥–∞–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä —è–≤–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          const spinner = configStatusEl.querySelector('.spinner-border');
          if (spinner) spinner.remove();

          enableButtons();
        }
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
    }
  };

  socket.onerror = function(error) {
    console.error('üö® WebSocket –æ—à–∏–±–∫–∞:', error);
    showAlert('danger', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    updateConfigStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    hideOverlay();
    enableButtons();
  };

  socket.onclose = function(event) {
    console.log('‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç:', event.code, event.reason);
    if (event.code !== 1000) {
      updateConfigStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    }
    hideOverlay();
    enableButtons();
  };

  // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–π–º–∞—É—Ç, –¥–æ–±–∞–≤—å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–∏:
  /*
  setTimeout(() => {
    if (operationInProgress) return;

    const spinner = configStatusEl.querySelector('.spinner-border');
    if (spinner) {
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      updateConfigStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
      hideOverlay();
    }
  }, 10000);
  */

  function disableButtons() {
    Object.values(buttons).forEach(btn => {
      if (btn) btn.disabled = true;
    });
  }

  function enableButtons() {
    Object.values(buttons).forEach(btn => {
      if (btn) btn.disabled = false;
    });
  }

  if (buttons.toggle) {
    buttons.toggle.addEventListener('click', function() {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?")) {
        disableButtons();
        showOverlay('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        showSpinner('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        socket.send(JSON.stringify({action: 'toggle_mongo'}));
      }
    });
  }

  if (buttons.restore) {
    buttons.restore.addEventListener('click', function() {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–∞—Ç–∏—Ç—å –¥–∞–º–ø PG?")) {
        disableButtons();
        showOverlay('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        showSpinner('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        socket.send(JSON.stringify({action: 'restore_backup'}));
      }
    });
  }

  if (buttons.fastPull) {
    buttons.fastPull.addEventListener('click', function() {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π git pull?")) {
        disableButtons();
        showOverlay('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        showSpinner('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        socket.send(JSON.stringify({action: 'fast_pull'}));
      }
    });
  }

  if (buttons.pullReload) {
    buttons.pullReload.addEventListener('click', function() {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å git pull —Å redeploy?")) {
        disableButtons();
        showOverlay('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        showSpinner('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã...');
        socket.send(JSON.stringify({action: 'pull_with_reload'}));
      }
    });
  }
});
